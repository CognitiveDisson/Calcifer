#!/bin/sh

# Get path to a folder containing the script
SCRIPT_ROOT=`cd $(dirname $0) && pwd`

MODIFIED_FILES_COUNTER=0

exportModifiedFilesToSwiftLint() {
	# Go to folder containing the `.git` folder
	local GIT_FOLDER_LOCATION=`git rev-parse --show-toplevel`
	pushd "${GIT_FOLDER_LOCATION}" > /dev/null

	exportFilePathAsLintable() {
		local filePathRelativeToGitFolder="${1:?}"
		
		if [ -n "$MODIFIED_FILE_PATH_RELATIVE_TO_GIT_FOLDER" ]; then
			local filePath="${GIT_FOLDER_LOCATION}/${filePathRelativeToGitFolder}"
			export SCRIPT_INPUT_FILE_$MODIFIED_FILES_COUNTER="${filePath}"
			MODIFIED_FILES_COUNTER=$(( MODIFIED_FILES_COUNTER + 1 ))
		fi
	}

	# Export paths to:
	# 1. added files
	# 2. modified and unstaged files
	for MODIFIED_FILE_PATH_RELATIVE_TO_GIT_FOLDER in $(git ls-files -om --exclude-from=.gitignore | grep ".swift$"); do
		exportFilePathAsLintable "${MODIFIED_FILE_PATH_RELATIVE_TO_GIT_FOLDER}"
	done

	# Export paths to:
	# 1. modified and staged files
	for MODIFIED_FILE_PATH_RELATIVE_TO_GIT_FOLDER in $(git diff --cached --name-only | grep ".swift$"); do
		exportFilePathAsLintable "${MODIFIED_FILE_PATH_RELATIVE_TO_GIT_FOLDER}"
	done

	# Export number of exported files
	export SCRIPT_INPUT_FILE_COUNT=$MODIFIED_FILES_COUNTER

	popd > /dev/null
}

performPrebuildLint() {
	local LINTER_CONFIGURATION_PATH="${SCRIPT_ROOT}/Avito.swiftlint.yml"

	local LINTER_WORKING_DIRECTORY="$SCRIPT_ROOT/.."

	# Launch `swiftlint lint`
	local SWIFTLINT_EXECUTABLE_PATH="${SCRIPT_ROOT}/swiftlint"

	( # Create a subshell via `()`. This makes `set -x` work only for one command
		set -x
		"$SWIFTLINT_EXECUTABLE_PATH/swiftlint" lint --use-script-input-files \
	    	                                        --no-cache \
	    	                                        --path "${LINTER_WORKING_DIRECTORY}" \
	        	                                    --config "${LINTER_CONFIGURATION_PATH}"
	)
}

main() {
	echo "Linting started"
	
	exportModifiedFilesToSwiftLint

	if [ "${MODIFIED_FILES_COUNTER}" == "0" ]; then
		echo "Linting finished early [nothing to lint]"
	else 
		performPrebuildLint
		echo "Linting finished"
	fi
}

main
